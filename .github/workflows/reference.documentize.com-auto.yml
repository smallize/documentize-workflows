name: reference.documentize.com-auto

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: environment
        default: staging
        required: true

jobs:
  deploy:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: smallize/documentize
        token: ${{ secrets.REPO_TOKEN }}
        fetch-depth: 0
        submodules: true

    - name: Install dependencies
      run: |
        choco install python --pre --no-progress
        python -m pip install --upgrade pip
        python -m pip install beautifulsoup4

    - name: Install .NET SDK 8.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        include-prerelease: true

    - name: Find latest zip file
      id: find_zip
      shell: bash
      run: |
        latest_zip=$(ls static/packages/Documentize.*.zip | sort -V | tail -n1)
        echo "Latest zip file is $latest_zip"
        echo "zip_file=$latest_zip" >> $GITHUB_OUTPUT

    - name: Extract the latest zip file and prepare docfx_input
      run: |
        mkdir temp_folder\docfx_input
        tar -xf "${{ steps.find_zip.outputs.zip_file }}" -C temp_folder
        # Copy the necessary DLL and XML files to docfx_input
        copy temp_folder\lib\*.dll temp_folder\docfx_input\
        copy temp_folder\lib\*.xml temp_folder\docfx_input\

    - name: Download and extract DocFX
      run: |
        curl -L -o docfx.zip https://github.com/dotnet/docfx/releases/download/v2.77.0/docfx-win-x64-v2.77.0.zip
        tar -xf docfx.zip -C temp_folder\docfx_input

    - name: Copy docfx.json to docfx_input
      run: |
        copy docfx.json temp_folder\docfx_input\

    - name: Run DocFX
      working-directory: temp_folder\docfx_input
      run: |
        .\docfx metadata --logLevel Warning || echo "DocFX failed with exit code %ERRORLEVEL%"

    - name: Run Python script
      run: |
        python scripts\postprocessor.py temp_folder\docfx_input\api

    - name: Copy files to Hugo content
      run: |
        # Ensure the target directory is empty
        if (Test-Path -Path content\reference.documentize.com\en\) {
            Remove-Item -Recurse -Force content\reference.documentize.com\en\
        }
        New-Item -ItemType Directory -Force -Path content\reference.documentize.com\en\
        xcopy /s /e /y temp_folder\docfx_input\api\* content\reference.documentize.com\en\

    - name: Clean up
      run: |
        Remove-Item -Recurse -Force temp_folder

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.135.0' # Specify a recent stable version
        extended: true

    - name: Determine Base URL
      id: base-url
      run: |
        if ("%GITHUB_EVENT_INPUTS_ENVIRONMENT%" -eq "production") {
          echo url=https://reference.documentize.com >> $GITHUB_OUTPUT
        }
        else {
          echo url=https://reference-qa.documentize.com >> $GITHUB_OUTPUT
        }

    - name: Build
      run: hugo --config "configs/reference.documentize.com.toml","configs/common.documentize.com.toml" -b "${{ steps.base-url.outputs.url }}" --cleanDestinationDir --minify --templateMetrics --templateMetricsHints --enableGitInfo

    - name: Deploy
      run: hugo deploy --config "configs/reference.documentize.com.toml" --maxDeletes=-1 --target "${{ github.event.inputs.environment }}" --invalidateCDN --force
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS }}
