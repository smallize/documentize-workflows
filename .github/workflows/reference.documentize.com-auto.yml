name: reference.documentize.com-auto

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: environment
        default: staging
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: smallize/documentize
        token: ${{ secrets.REPO_TOKEN }}
        fetch-depth: 0
        submodules: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip python3-pip
        python3 -m pip install --upgrade pip
        python3 -m pip install beautifulsoup4

    - name: Install .NET SDK 8.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        include-prerelease: true

    - name: Find latest zip file
      id: find_zip
      shell: bash
      run: |
        latest_zip=$(ls static/packages/Documentize.*.zip | sort -V | tail -n1)
        echo "Latest zip file is $latest_zip"
        echo "zip_file=$latest_zip" >> $GITHUB_OUTPUT

    - name: Extract the latest zip file and prepare docfx_input
      run: |
        mkdir -p temp_folder/docfx_input
        unzip -o "${{ steps.find_zip.outputs.zip_file }}" -d temp_folder
        # Ensure DLL and XML files are copied to docfx_input
        cp -v temp_folder/lib/*.dll temp_folder/docfx_input/ || echo "No DLLs found in lib folder."
        cp -v temp_folder/lib/*.xml temp_folder/docfx_input/ || echo "No XMLs found in lib folder."

    - name: Download and extract DocFX into docfx_input
      run: |
        wget https://github.com/dotnet/docfx/releases/download/v2.77.0/docfx-linux-x64-v2.77.0.zip -O docfx.zip
        unzip -o -j docfx.zip -d temp_folder/docfx_input
        chmod +x temp_folder/docfx_input/docfx

    - name: Create docfx.json
      run: |
        cat <<EOF > temp_folder/docfx_input/docfx.json
        {
          "metadata": [
            {
              "src": [
                {
                  "files": ["*.dll"]
                }
              ],
              "dest": "api",
              "outputFormat": "markdown"
            }
          ]
        }
        EOF

    - name: Run DocFX with logging
      working-directory: temp_folder/docfx_input
      run: |
        ./docfx metadata --logLevel Warning || echo "DocFX failed with exit code $?"

    - name: Run Python script
      run: |
        python3 scripts/postprocessor.py temp_folder/docfx_input/api

    - name: Copy files
      run: |
        mkdir -p content/reference.documentize.com/en/
        cp -r temp_folder/docfx_input/api/* content/reference.documentize.com/en/

    - name: Clean up
      run: |
        rm -rf temp_folder

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: 'latest'
        extended: true

    - name: Determine Base URL
      id: base-url
      run: |
        if [ "${{ github.event.inputs.environment }}" = "production" ]; then
          echo "url=https://reference.documentize.com" >> $GITHUB_OUTPUT
        else
          echo "url=https://reference-qa.documentize.com" >> $GITHUB_OUTPUT
        fi

    - name: Build
      run: hugo --config "configs/reference.documentize.com.toml","configs/common.documentize.com.toml" -b "${{ steps.base-url.outputs.url }}" --cleanDestinationDir --minify --templateMetrics --templateMetricsHints --enableGitInfo

    - name: Deploy
      run: hugo deploy --config "configs/reference.documentize.com.toml" --maxDeletes=-1 --target "${{ github.event.inputs.environment }}" --invalidateCDN --force
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS }}
